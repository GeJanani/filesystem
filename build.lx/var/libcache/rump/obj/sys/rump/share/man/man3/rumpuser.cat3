RUMPUSER(3)                Library Functions Manual                RUMPUSER(3)

NNAAMMEE
     rruummppuusseerr - rump kernel hypercall interface

LLIIBBRRAARRYY
     rump User Library (librumpuser, -lrumpuser)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<rruummpp//rruummppuusseerr..hh>>

DDEESSCCRRIIPPTTIIOONN
     The rruummppuusseerr hypercall interfaces allow a rump kernel to access host
     resources.  A hypervisor implementation must implement the routines
     described in this document to allow a rump kernel to run on the host.
     The implementation included in NetBSD is for POSIX-like hosts (*BSD,
     Linux, etc.).  This document is divided into sections based on the
     functionality group of each hypercall.

     Since the hypercall interface is a C function interface, both the rump
     kernel and the hypervisor must conform to the same ABI.  The interface
     itself attempts to assume as little as possible from the type systems,
     and for example _o_f_f___t is passed as _i_n_t_6_4___t and enums are passed as ints.
     It is recommended that the hypervisor converts these to the native types
     before starting to process the hypercall, for example by assigning the
     ints back to enums.

UUPPCCAALLLLSS AANNDD RRUUMMPP KKEERRNNEELL CCOONNTTEEXXTT
     A hypercall is always entered with the calling thread scheduled in the
     rump kernel.  In case the hypercall intends to block while waiting for an
     event, the hypervisor must first release the rump kernel scheduling
     context.  In other words, the rump kernel context is a resource and
     holding on to it while waiting for a rump kernel event/resource may lead
     to a deadlock.  Even when there is no possibility of deadlock in the
     strict sense of the term, holding on to the rump kernel context while
     performing a slow hypercall such as reading a device will prevent other
     threads (including the clock interrupt) from using that rump kernel
     context.

     Releasing the context is done by calling the hhyypp__bbaacckkeenndd__uunnsscchheedduullee()
     upcall which the hypervisor received from rump kernel as a parameter for
     rruummppuusseerr__iinniitt().  Before a hypercall returns back to the rump kernel, the
     returning thread must carry a rump kernel context.  In case the hypercall
     unscheduled itself, it must reschedule itself by calling
     hhyypp__bbaacckkeenndd__sscchheedduullee().

HHYYPPEERRCCAALLLL IINNTTEERRFFAACCEESS
   IInniittiiaalliizzaattiioonn
     _i_n_t rruummppuusseerr__iinniitt(_i_n_t _v_e_r_s_i_o_n, _s_t_r_u_c_t _r_u_m_p___h_y_p_e_r_u_p _*_h_y_p)

     Initialize the hypervisor.

     _v_e_r_s_i_o_n          hypercall interface version number that the kernel
                      expects to be used.  In case the hypervisor cannot
                      provide an exact match, this routine must return a non-
                      zero value.

     _h_y_p              pointer to a set of upcalls the hypervisor can make into
                      the rump kernel

   MMeemmoorryy aallllooccaattiioonn
     _i_n_t rruummppuusseerr__mmaalllloocc(_s_i_z_e___t _l_e_n, _i_n_t _a_l_i_g_n_m_e_n_t, _v_o_i_d _*_*_m_e_m_p)

     _l_e_n              amount of memory to allocate

     _a_l_i_g_n_m_e_n_t        size the returned memory must be aligned to.  For
                      example, if the value passed is 4096, the returned
                      memory must be aligned to a 4k boundary.

     _m_e_m_p             return pointer for allocated memory

     _v_o_i_d rruummppuusseerr__ffrreeee(_v_o_i_d _*_m_e_m, _s_i_z_e___t _l_e_n)

     _m_e_m              memory to free

     _l_e_n              length of allocation.  This is always equal to the
                      amount the caller requested from the rruummppuusseerr__mmaalllloocc()
                      which returned _m_e_m.

   FFiilleess aanndd II//OO
     _i_n_t rruummppuusseerr__ooppeenn(_c_o_n_s_t _c_h_a_r _*_n_a_m_e, _i_n_t _m_o_d_e, _i_n_t _*_f_d_p)

     Open _n_a_m_e for I/O and associate a file descriptor with it.  Notably,
     there needs to be no mapping between _n_a_m_e and the host's file system
     namespace.  For example, it is possible to associate the file descriptor
     with device I/O registers for special values of _n_a_m_e.

     _n_a_m_e             the identifier of the file to open for I/O

     _m_o_d_e             combination of the following:

                      RUMPUSER_OPEN_RDONLY   open only for reading

                      RUMPUSER_OPEN_WRONLY   open only for writing

                      RUMPUSER_OPEN_RDWR     open for reading and writing

                      RUMPUSER_OPEN_CREATE   do not treat missing _n_a_m_e as an
                                             error

                      RUMPUSER_OPEN_EXCL     combined with
                                             RUMPUSER_OPEN_CREATE, flag an
                                             error if _n_a_m_e already exists

                      RUMPUSER_OPEN_BIO      the caller will use this file for
                                             block I/O, usually used in
                                             conjunction with accessing file
                                             system media.  The hypervisor
                                             should treat this flag as
                                             advisory and possibly enable some
                                             optimizations for _*_f_d_p based on
                                             it.
                      Notably, the permissions of the created file are left up
                      to the hypervisor implementation.

     _f_d_p              An integer value denoting the open file is returned
                      here.

     _i_n_t rruummppuusseerr__cclloossee(_i_n_t _f_d)

     Close a previously opened file descriptor.

     _i_n_t rruummppuusseerr__ggeettffiilleeiinnffoo(_c_o_n_s_t _c_h_a_r _*_n_a_m_e, _u_i_n_t_6_4___t _*_s_i_z_e, _i_n_t _*_t_y_p_e)

     _n_a_m_e             file for which information is returned.  The namespace
                      is equal to that of rruummppuusseerr__ooppeenn().

     _s_i_z_e             If non-NULL, size of the file is returned here.

     _t_y_p_e             If non-NULL, type of the file is returned here.  The
                      options are RUMPUSER_FT_DIR, RUMPUSER_FT_REG,
                      RUMPUSER_FT_BLK, RUMPUSER_FT_CHR, or RUMPUSER_FT_OTHER
                      for directory, regular file, block device, character
                      device or unknown, respectively.

     _v_o_i_d rruummppuusseerr__bbiioo(_i_n_t _f_d, _i_n_t _o_p, _v_o_i_d _*_d_a_t_a, _s_i_z_e___t _d_l_e_n, _i_n_t_6_4___t _o_f_f,
     _r_u_m_p___b_i_o_d_o_n_e___f_n _b_i_o_d_o_n_e, _v_o_i_d _*_d_o_n_e_a_r_g)

     Initiate block I/O and return immediately.

     _f_d               perform I/O on this file descriptor.  The file
                      descriptor must have been opened with RUMPUSER_OPEN_BIO.

     _o_p               Transfer data from the file descriptor with
                      RUMPUSER_BIO_READ and transfer data to the file
                      descriptor with RUMPUSER_BIO_WRITE.  Unless
                      RUMPUSER_BIO_SYNC is specified, the hypervisor may cache
                      a write instead of committing it to permanent storage.

     _d_a_t_a             memory address to transfer data to/from

     _d_l_e_n             length of I/O.  The length is guaranteed to be a
                      multiple of 512.

     _o_f_f              offset into _f_d where I/O is performed

     _b_i_o_d_o_n_e          To be called when the I/O is complete.  Accessing _d_a_t_a
                      is not legal after the call is made.

     _d_o_n_e_a_r_g          opaque arg that must be passed to _b_i_o_d_o_n_e.

     _i_n_t rruummppuusseerr__iioovvrreeaadd(_i_n_t _f_d, _s_t_r_u_c_t _r_u_m_p_u_s_e_r___i_o_v_e_c _*_r_u_i_o_v, _s_i_z_e___t _i_o_v_l_e_n,
     _i_n_t_6_4___t _o_f_f, _s_i_z_e___t _*_r_e_t_v)

     _i_n_t rruummppuusseerr__iioovvwwrriittee(_i_n_t _f_d, _s_t_r_u_c_t _r_u_m_p_u_s_e_r___i_o_v_e_c _*_r_u_i_o_v,
     _s_i_z_e___t _i_o_v_l_e_n, _i_n_t_6_4___t _o_f_f, _s_i_z_e___t _*_r_e_t_v)

     These routines perform scatter-gather I/O which is not block I/O by
     nature and therefore cannot be handled by rruummppuusseerr__bbiioo().

     _f_d               file descriptor to perform I/O on

     _r_u_i_o_v            an array of I/O descriptors.  It is defined as follows:
                            struct rumpuser_iovec {
                                    void *iov_base;
                                    size_t iov_len;
                            };

     _i_o_v_l_e_n           number of elements in _r_u_i_o_v

     _o_f_f              offset of _f_d to perform I/O on.  This can either be a
                      non-negative value or RUMPUSER_IOV_NOSEEK.  The latter
                      denotes that no attempt to change the underlying objects
                      offset should be made.  Using both types of offsets on a
                      single instance of _f_d results in undefined behavior.

     _r_e_t_v             number of bytes successfully transferred is returned
                      here

     _i_n_t rruummppuusseerr__ssyynnccffdd(_i_n_t _f_d, _i_n_t _f_l_a_g_s, _u_i_n_t_6_4___t _s_t_a_r_t, _u_i_n_t_6_4___t _l_e_n)

     Synchronizes _f_d with respect to backing storage.  The other arguments
     are:

     _f_l_a_g_s            controls how synchronization happens.  It must contain
                      one of the following:

                      RUMPUSER_SYNCFD_READ      Make sure that the next read
                                                sees writes from all other
                                                parties.  This is useful for
                                                example in the case that _f_d
                                                represents memory to write a
                                                DMA read is being performed.

                      RUMPUSER_SYNCFD_WRITE     Flush cached writes.

                      The following additional parameters may be passed in
                      _f_l_a_g_s:

                      RUMPUSER_SYNCFD_BARRIER   Issue a barrier.  Outstanding
                                                I/O operations which were
                                                started before the barrier
                                                complete before any operations
                                                after the barrier are
                                                performed.

                      RUMPUSER_SYNCFD_SYNC      Wait for the synchronization
                                                operation to fully complete
                                                before returning.  For
                                                example, this could mean that
                                                the data to be written to a
                                                disk has hit either the disk
                                                or non-volatile memory.

     _s_t_a_r_t            offset into the object.

     _l_e_n              the number of bytes to synchronize.  The value 0 denotes
                      until the end of the object.

   CClloocckkss
     The hypervisor should support two clocks, one for wall time and one for
     monotonically increasing time, the latter of which may be based on some
     arbitrary time (e.g. system boot time).  If this is not possible, the
     hypervisor must make a reasonable effort to retain semantics.

     _i_n_t rruummppuusseerr__cclloocckk__ggeettttiimmee(_i_n_t _e_n_u_m___r_u_m_p_c_l_o_c_k, _i_n_t_6_4___t _*_s_e_c, _l_o_n_g _*_n_s_e_c)

     _e_n_u_m___r_u_m_p_c_l_o_c_k   specifies the clock type.  In case of
                      RUMPUSER_CLOCK_RELWALL the wall time should be returned.
                      In case of RUMPUSER_CLOCK_ABSMONO the time of a
                      monotonic clock should be returned.

     _s_e_c              return value for seconds

     _n_s_e_c             return value for nanoseconds

     _i_n_t rruummppuusseerr__cclloocckk__sslleeeepp(_i_n_t _e_n_u_m___r_u_m_p_c_l_o_c_k, _i_n_t_6_4___t _s_e_c, _l_o_n_g _n_s_e_c)

     _e_n_u_m___r_u_m_p_c_l_o_c_k   In case of RUMPUSER_CLOCK_RELWALL, the sleep should last
                      at least as long as specified.  In case of
                      RUMPUSER_CLOCK_ABSMONO, the sleep should last until the
                      hypervisor monotonic clock hits the specified absolute
                      time.

     _s_e_c              sleep duration, seconds.  exact semantics depend on _c_l_k.

     _n_s_e_c             sleep duration, nanoseconds.  exact semantics depend on
                      _c_l_k.

   PPaarraammeetteerr rreettrriieevvaall
     _i_n_t rruummppuusseerr__ggeettppaarraamm(_c_o_n_s_t _c_h_a_r _*_n_a_m_e, _v_o_i_d _*_b_u_f, _s_i_z_e___t _b_u_f_l_e_n)

     Retrieve a configuration parameter from the hypervisor.  It is up to the
     hypervisor to decide how the parameters can be set.

     _n_a_m_e             name of the parameter.  If the name starts with an
                      underscore, it means a mandatory parameter.  The
                      mandatory parameters are RUMPUSER_PARAM_NCPU which
                      specifies the amount of virtual CPUs bootstrapped by the
                      rump kernel and RUMPUSER_PARAM_HOSTNAME which returns a
                      preferably unique instance name for the rump kernel.

     _b_u_f              buffer to return the data in as a string

     _b_u_f_l_e_n           length of buffer

   TTeerrmmiinnaattiioonn
     _v_o_i_d rruummppuusseerr__eexxiitt(_i_n_t _v_a_l_u_e)

     Terminate the rump kernel with exit value _v_a_l_u_e.  If _v_a_l_u_e is
     RUMPUSER_PANIC the hypervisor should attempt to provide something akin to
     a core dump.

   CCoonnssoollee oouuttppuutt
     Console output is divided into two routines: a per-character one and
     printf-like one.  The former is used e.g. by the rump kernel's internal
     printf routine.  The latter can be used for direct debug prints e.g. very
     early on in the rump kernel's bootstrap or when using the in-kernel
     routine causes too much skew in the debug print results (the hypercall
     runs outside of the rump kernel and therefore does not cause any locking
     or scheduling events inside the rump kernel).

     _v_o_i_d rruummppuusseerr__ppuuttcchhaarr(_i_n_t _c_h)

     Output _c_h on the console.

     _v_o_i_d rruummppuusseerr__ddpprriinnttff(_c_o_n_s_t _c_h_a_r _*_f_m_t, _._._.)

     Do output based on printf-like parameters.

   SSiiggnnaallss
     A rump kernel should be able to send signals to client programs due to
     some standard interfaces including signal delivery in their
     specifications.  Examples of these interfaces include setitimer(2) and
     write(2).  The rruummppuusseerr__kkiillll() function advises the hypercall
     implementation to raise a signal for the process containing the rump
     kernel.

     _i_n_t rruummppuusseerr__kkiillll(_i_n_t_6_4___t _p_i_d, _i_n_t _s_i_g)

     _p_i_d              The pid of the rump kernel process that the signal is
                      directed to.  This value may be used as the hypervisor
                      as a hint on how to deliver the signal.  The value
                      RUMPUSER_PID_SELF may also be specified to indicate no
                      hint.  This value will be removed in a future version of
                      the hypercall interface.

     _s_i_g              Number of signal to raise.  The value is in NetBSD
                      signal number namespace.  In case the host has a native
                      representation for signals, the value should be
                      translated before the signal is raised.  In case there
                      is no mapping between _s_i_g and native signals (if any),
                      the behavior is implementation-defined.

     A rump kernel will ignore the return value of this hypercall.  The only
     implication of not implementing rruummppuusseerr__kkiillll() is that some application
     programs may not experience expected behavior for standard interfaces.

     As an aside,the rump_sp(7) protocol provides equivalent functionality for
     remote clients.

   RRaannddoomm ppooooll
     _i_n_t rruummppuusseerr__ggeettrraannddoomm(_v_o_i_d _*_b_u_f, _s_i_z_e___t _b_u_f_l_e_n, _i_n_t _f_l_a_g_s, _s_i_z_e___t _*_r_e_t_p)

     _b_u_f              buffer that the randomness is written to

     _b_u_f_l_e_n           number of bytes of randomness requested

     _f_l_a_g_s            The value 0 or a combination of RUMPUSER_RANDOM_HARD
                      (return true randomness instead of something from a
                      PRNG) and RUMPUSER_RANDOM_NOWAIT (do not block in case
                      the requested amount of bytes is not available).

     _r_e_t_p             The number of random bytes written into _b_u_f.

   TThhrreeaaddss
     _i_n_t rruummppuusseerr__tthhrreeaadd__ccrreeaattee(_v_o_i_d _*_(_*_f_u_n_)_(_v_o_i_d _*_), _v_o_i_d _*_a_r_g,
     _c_o_n_s_t _c_h_a_r _*_t_h_r_n_a_m_e, _i_n_t _m_u_s_t_j_o_i_n, _i_n_t _p_r_i_o_r_i_t_y, _i_n_t _c_p_u_i_d_x,
     _v_o_i_d _*_*_c_o_o_k_i_e)

     Create a schedulable host thread context.  The rump kernel will call this
     interface when it creates a kernel thread.  The scheduling policy for the
     new thread is defined by the hypervisor.  In case the hypervisor wants to
     optimize the scheduling of the threads, it can perform heuristics on the
     _t_h_r_n_a_m_e, _p_r_i_o_r_i_t_y and _c_p_u_i_d_x parameters.

     _f_u_n              function that the new thread must call.  This call will
                      never return.

     _a_r_g              argument to be passed to _f_u_n

     _t_h_r_n_a_m_e          Name of the new thread.

     _m_u_s_t_j_o_i_n         If 1, the thread will be waited for by
                      rruummppuusseerr__tthhrreeaadd__jjooiinn() when the thread exits.

     _p_r_i_o_r_i_t_y         The priority that the kernel requested the thread to be
                      created at.  Higher values mean higher priority.  The
                      exact kernel semantics for each value are not available
                      through this interface.

     _c_p_u_i_d_x           The index of the virtual CPU that the thread is bound
                      to, or -1 if the thread is not bound.  The mapping
                      between the virtual CPUs and physical CPUs, if any, is
                      hypervisor implementation specific.

     _c_o_o_k_i_e           In case _m_u_s_t_j_o_i_n is set, the value returned in _c_o_o_k_i_e
                      will be passed to rruummppuusseerr__tthhrreeaadd__jjooiinn().

     _v_o_i_d rruummppuusseerr__tthhrreeaadd__eexxiitt(_v_o_i_d)

     Called when a thread created with rruummppuusseerr__tthhrreeaadd__ccrreeaattee() exits.

     _i_n_t rruummppuusseerr__tthhrreeaadd__jjooiinn(_v_o_i_d _*_c_o_o_k_i_e)

     Wait for a joinable thread to exit.  The cookie matches the value from
     rruummppuusseerr__tthhrreeaadd__ccrreeaattee().

     _v_o_i_d rruummppuusseerr__ccuurrllwwppoopp(_i_n_t _e_n_u_m___r_u_m_p_l_w_p_o_p, _s_t_r_u_c_t _l_w_p _*_l)

     Manipulate the hypervisor's thread context database.  The possible
     operations are create, destroy, and set as specified by _e_n_u_m___r_u_m_p_l_w_p_o_p:

     RUMPUSER_LWP_CREATE    Inform the hypervisor that _l is now a valid thread
                            context which may be set.  A currently valid value
                            of _l may not be specified.  This operation is
                            informational and does not mandate any action from
                            the hypervisor.

     RUMPUSER_LWP_DESTROY   Inform the hypervisor that _l is no longer a valid
                            thread context.  This means that it may no longer
                            be set as the current context.  A currently set
                            context or an invalid one may not be destroyed.
                            This operation is informational and does not
                            mandate any action from the hypervisor.

     RUMPUSER_LWP_SET       Set _l as the current host thread's rump kernel
                            context.  A previous context must not exist.

     RUMPUSER_LWP_CLEAR     Clear the context previous set by
                            RUMPUSER_LWP_SET.  The value passed in _l is the
                            current thread and is never NULL.

     _s_t_r_u_c_t _l_w_p _* rruummppuusseerr__ccuurrllwwpp(_v_o_i_d)

     Retrieve the rump kernel thread context associated with the current host
     thread, as set by rruummppuusseerr__ccuurrllwwppoopp().  This routine may be called when a
     context is not set and the routine must return NULL in that case.  This
     interface is expected to be called very often.  Any optimizations
     pertaining to the execution speed of this routine should be done in
     rruummppuusseerr__ccuurrllwwppoopp().

     _v_o_i_d rruummppuusseerr__sseetteerrrrnnoo(_i_n_t _e_r_r_n_o)

     Set an errno value in the calling thread's TLS.  Note: this is used only
     if rump kernel clients make rump system calls.

   MMuutteexxeess,, rrwwlloocckkss aanndd ccoonnddiittiioonn vvaarriiaabblleess
     The locking interfaces have standard semantics, so we will not discuss
     each one in detail.  The data types _s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x, _s_t_r_u_c_t
     _r_u_m_p_u_s_e_r___r_w and _s_t_r_u_c_t _r_u_m_p_u_s_e_r___c_v used by these interfaces are opaque to
     the rump kernel, i.e. the hypervisor has complete freedom over them.

     Most of these interfaces will (and must) relinquish the rump kernel CPU
     context in case they block (or intend to block).  The exceptions are the
     "nowrap" variants of the interfaces which may not relinquish rump kernel
     context.

     _v_o_i_d rruummppuusseerr__mmuutteexx__iinniitt(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x _*_*_m_t_x_p, _i_n_t _f_l_a_g_s)

     _v_o_i_d rruummppuusseerr__mmuutteexx__eenntteerr(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x _*_m_t_x)

     _v_o_i_d rruummppuusseerr__mmuutteexx__eenntteerr__nnoowwrraapp(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x _*_m_t_x)

     _i_n_t rruummppuusseerr__mmuutteexx__ttrryyeenntteerr(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x _*_m_t_x)

     _v_o_i_d rruummppuusseerr__mmuutteexx__eexxiitt(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x _*_m_t_x)

     _v_o_i_d rruummppuusseerr__mmuutteexx__ddeessttrrooyy(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x _*_m_t_x)

     _v_o_i_d rruummppuusseerr__mmuutteexx__oowwnneerr(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x _*_m_t_x, _s_t_r_u_c_t _l_w_p _*_*_l_p)

     Mutexes provide mutually exclusive locking.  The flags, of which at least
     one must be given, are as follows:

     RUMPUSER_MTX_SPIN     Create a spin mutex.  Locking this type of mutex
                           must not relinquish rump kernel context even when
                           rruummppuusseerr__mmuutteexx__eenntteerr() is used.

     RUMPUSER_MTX_KMUTEX   The mutex must track and be able to return the rump
                           kernel thread that owns the mutex (if any).  If
                           this flag is not specified, rruummppuusseerr__mmuutteexx__oowwnneerr()
                           will never be called for that particular mutex.

     _v_o_i_d rruummppuusseerr__rrww__iinniitt(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___r_w _*_*_r_w_p)

     _v_o_i_d rruummppuusseerr__rrww__eenntteerr(_i_n_t _e_n_u_m___r_u_m_p_r_w_l_o_c_k, _s_t_r_u_c_t _r_u_m_p_u_s_e_r___r_w _*_r_w)

     _i_n_t rruummppuusseerr__rrww__ttrryyeenntteerr(_i_n_t _e_n_u_m___r_u_m_p_r_w_l_o_c_k, _s_t_r_u_c_t _r_u_m_p_u_s_e_r___r_w _*_r_w)

     _i_n_t rruummppuusseerr__rrww__ttrryyuuppggrraaddee(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___r_w _*_r_w)

     _v_o_i_d rruummppuusseerr__rrww__ddoowwnnggrraaddee(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___r_w _*_r_w)

     _v_o_i_d rruummppuusseerr__rrww__eexxiitt(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___r_w _*_r_w)

     _v_o_i_d rruummppuusseerr__rrww__ddeessttrrooyy(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___r_w _*_r_w)

     _v_o_i_d rruummppuusseerr__rrww__hheelldd(_i_n_t _e_n_u_m___r_u_m_p_r_w_l_o_c_k, _s_t_r_u_c_t _r_u_m_p_u_s_e_r___r_w _*_r_w,
     _i_n_t _*_h_e_l_d_p)

     Read/write locks provide either shared or exclusive locking.  The
     possible values for _l_k are RUMPUSER_RW_READER and RUMPUSER_RW_WRITER.
     Upgrading means trying to migrate from an already owned shared lock to an
     exclusive lock and downgrading means migrating from an already owned
     exclusive lock to a shared lock.

     _v_o_i_d rruummppuusseerr__ccvv__iinniitt(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___c_v _*_*_c_v_p)

     _v_o_i_d rruummppuusseerr__ccvv__ddeessttrrooyy(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___c_v _*_c_v)

     _v_o_i_d rruummppuusseerr__ccvv__wwaaiitt(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___c_v _*_c_v, _s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x _*_m_t_x)

     _v_o_i_d rruummppuusseerr__ccvv__wwaaiitt__nnoowwrraapp(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___c_v _*_c_v, _s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x
     _*_m_t_x)

     _i_n_t rruummppuusseerr__ccvv__ttiimmeeddwwaaiitt(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___c_v _*_c_v,
     _s_t_r_u_c_t _r_u_m_p_u_s_e_r___m_t_x _*_m_t_x, _i_n_t_6_4___t _s_e_c, _i_n_t_6_4___t _n_s_e_c)

     _v_o_i_d rruummppuusseerr__ccvv__ssiiggnnaall(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___c_v _*_c_v)

     _v_o_i_d rruummppuusseerr__ccvv__bbrrooaaddccaasstt(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___c_v _*_c_v)

     _v_o_i_d rruummppuusseerr__ccvv__hhaass__wwaaiitteerrss(_s_t_r_u_c_t _r_u_m_p_u_s_e_r___c_v _*_c_v, _i_n_t _*_w_a_i_t_e_r_s_p)

     Condition variables wait for an event.  The _m_t_x interlock eliminates a
     race between checking the predicate and sleeping on the condition
     variable; the mutex should be released for the duration of the sleep in
     the normal atomic manner.  The timedwait variant takes a specifier
     indicating a relative sleep duration after which the routine will return
     with ETIMEDOUT.  If a timedwait is signaled before the timeout expires,
     the routine will return 0.

     The order in which the hypervisor reacquires the rump kernel context and
     interlock mutex before returning into the rump kernel is as follows.  In
     case the interlock mutex was initialized with both RUMPUSER_MTX_SPIN and
     RUMPUSER_MTX_KMUTEX, the rump kernel context is scheduled before the
     mutex is reacquired.  In case of a purely RUMPUSER_MTX_SPIN mutex, the
     mutex is acquired first.  In the final case the order is implementation-
     defined.

RREETTUURRNN VVAALLUUEESS
     All routines which return an integer return an errno value.  The
     hypervisor must translate the value to the the native errno namespace
     used by the rump kernel.  Routines which do not return an integer may
     never fail.

SSEEEE AALLSSOO
     rump(3)

     Antti Kantee, "Flexible Operating System Internals: The Design and
     Implementation of the Anykernel and Rump Kernels", _A_a_l_t_o _U_n_i_v_e_r_s_i_t_y
     _D_o_c_t_o_r_a_l _D_i_s_s_e_r_t_a_t_i_o_n_s, 2012, Section 2.3.2: The Hypercall Interface.

     For a list of all known implementations of the rruummppuusseerr interface, see
     hhttttpp::////wwiikkii..rruummppkkeerrnneell..oorrgg//PPllaattffoorrmmss.

HHIISSTTOORRYY
     The rump kernel hypercall API was first introduced in NetBSD 5.0.  The
     API described above first appeared in NetBSD 7.0.

NetBSD 7.99                     August 24, 2014                    NetBSD 7.99
